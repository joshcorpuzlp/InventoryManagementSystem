/**
 * Supplied class Part.java
 */

/**
 *
 * @author Joshua Corpuz
 */
package model;

import javafx.beans.property.SimpleStringProperty;

/**
 * Supplied class Part.java
 */

/**
 *
 * @author Joshua Corpuz
 */
public abstract class Part {

    private int id;
    private SimpleStringProperty partName;
    private int partInventoryLevel, maxInventory, minInventory;
    private double price;

    //id field needs to also have a corresponding static int id to keep count of all the inputted items.
    private static int partCounter = 1;

    /**
     * This is the constructor that initializes the data fields within a Part object.
     * Note: The part's ID number is autogenerated
     * @param partName The part's name.
     * @param partInventoryLevel The part's stock level
     * @param price The part's price.
     * @param maxInventory The part's maximum inventory level
     * @param minInventory The part's minimum inventory level
     */
    public Part(String partName, int partInventoryLevel, double price, int maxInventory, int minInventory) {
        setId();
        setPartName(partName);
        setPartInventoryLevel(partInventoryLevel);
        setPrice(price);
        setMaxInventory(maxInventory);
        setMinInventory(minInventory);
    }

    /**
     * Method that returns the part's ID variable.
     * @return This returns the ID number as an integer
     */
    public int getId() {
        return id;
    }

    /**
     * This method sets the id for an Object. It utilizes an static variable as a counter to auto generate an ID number
     */
    public void setId() {
        this.id = partCounter++;
    }

    /**
     * This method returns a Part object's name
     * @return returns the Part's name as a string
     */
    public String getPartName() {
        return partName.get();
    }

    /**
     * This method sets the Part object's name.
     * @param partName A String object is passed as an argument.
     */
    public void setPartName(String partName) {
        this.partName = new SimpleStringProperty(partName);
    }

    /**
     * Method returns the Inventory level of a Part Object
     * @return returns the Part's Inventory level as an integer value.
     */
    public int getPartInventoryLevel() {
        return partInventoryLevel;
    }

    /**
     * This method sets the Part object's inventory level.
     * @param partInventoryLevel An integer value is passed as an argument.
     */
    public void setPartInventoryLevel(int partInventoryLevel) {
        this.partInventoryLevel = partInventoryLevel;
    }

    /**
     * This method returns the maximum inventory level of a Part object.
     * @return returns the Part's maximum inventory level as an integer value.
     */
    public int getMaxInventory() {
        return maxInventory;
    }

    /**
     * This method sets the Part object's maximum inventory level.
     * @param maxInventory An integer value is passed as an argument.
     */
    public void setMaxInventory(int maxInventory) {
        this.maxInventory = maxInventory;
    }

    /**
     * This method returns the minimum inventory level of a Part object.
     * @return returns the Part's minimum inventory level as an integer value.
     */
    public int getMinInventory() {
        return minInventory;
    }

    /**
     * This method sets the Part object's minimum inventory level.
     * @param minInventory An integer value is passed as an argument.
     */
    public void setMinInventory(int minInventory) {
        this.minInventory = minInventory;
    }

    /**
     * This method returns the price of a Part object.
     * @return returns the Part's price as a double value.
     */
    public double getPrice() {
        return price;
    }

    /**
     * This method sets the Part object's price.
     * @param price A double value is passed as an argument.
     */
    public void setPrice(double price) {
        this.price = price;
    }

}
